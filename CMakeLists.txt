# Cmake script designed to embed any resource file into the executable at compile time.
# It will automatically generate necessary header and source file, which then you can use in the manner demonstrated below.
#
# USAGE:
# 1) Use "set(EMBEDDED_RESOURCES <file_path1> [: <variable_name1>]
#                                [<file_path2> [: <variable_name2>]
#                                ...])" in your main CMakeList.txt
# 2) Link the library generated by this script with
# "target_link_libraries(<target> <PRIVATE|PUBLIC|INTERFACE> ResourceEmbedder)" in your main CMakeList.txt
# 3) Include "resource_embedder.h" in any file you would like to use preloaded resources in
# 4) Now you can use the resources with "embedder::example_variable"
#
# NOTES:
# - Variable names are optional, if you don't specify any name, it will be set to "filename_extension"
# - If the name of the variable is already in use (e.g., "variable_name"), it will be set to "variable_name1", "variable_name2", etc.
# - The working directory is set to the parent's directory which invokes "add_subdirectory()", but absolute paths
#   will work as well
#

project(ResourceEmbedder)

if("${EMBEDDED_RESOURCES}" STREQUAL "")
    message(FATAL_ERROR "Variable \"EMBEDDED_RESOURCES\" is empty or not defined!")
endif()

set(resource_embedder_h "#ifndef RESOURCE_EMBEDDER_H
#define RESOURCE_EMBEDDER_H\n
namespace embedder
{\n")

set(resource_embedder_cpp "#include \"resource_embedder.h\"\n
namespace embedder
{")

set(taken_names)

foreach(pair IN LISTS EMBEDDED_RESOURCES)
    string(FIND "${pair}" : colon_pos REVERSE)

    if(colon_pos EQUAL 1)
        message(WARNING "Element \"${pair}\" is malformed and will be omitted")
        continue()

    elseif(colon_pos EQUAL -1)
        string(STRIP "${pair}" key)

        cmake_path(IS_ABSOLUTE key is_absolute)

        if(NOT is_absolute)
            cmake_path(GET CMAKE_CURRENT_LIST_DIR PARENT_PATH parent_dir)
            set(key "${parent_dir}/${key}")
        endif()

        if (NOT EXISTS "${key}")
            message(WARNING "File \"${key}\" does not exist and will be omitted")
            continue()
        endif()

        if (IS_DIRECTORY "${key}")
            message(WARNING "File \"${key}\" is a directory and will be omitted")
            continue()
        endif()

        cmake_path(GET key FILENAME filename)
        string(REPLACE "." "_" filename "${filename}")

        set(temp_name "${filename}")
        set(suffix 0)
        while("${temp_name}" IN_LIST taken_names)
            math(EXPR suffix "${suffix} + 1")
            set(temp_name "${filename}")
            string(APPEND temp_name "${suffix}")
        endwhile()

        if ("${filename}" IN_LIST taken_names)
            message(WARNING "Name \"${filename}\" is already in use. \"${temp_name}\" will be used instead")
        endif()

        set(value "${temp_name}")
        list(APPEND taken_names "${value}")

        string(APPEND resource_embedder_h "extern unsigned char ${value}[];\n")

        file(READ "${key}" resource HEX)
        string(APPEND resource_embedder_cpp "\nunsigned char ${value}[] = \"${resource}\";")

    else()
        string(SUBSTRING "${pair}" 0 "${colon_pos}" key)
        math(EXPR colon_pos "${colon_pos} + 1")
        string(SUBSTRING "${pair}" "${colon_pos}" -1 value)

        string(STRIP "${key}" key)
        string(STRIP "${value}" value)

        cmake_path(IS_ABSOLUTE key is_absolute)

        if(NOT is_absolute)
            cmake_path(GET CMAKE_CURRENT_LIST_DIR PARENT_PATH parent_dir)
            set(key "${parent_dir}/${key}")
        endif()

        if (NOT EXISTS "${key}")
            message(WARNING "File \"${key}\" does not exist and will be omitted")
            continue()
        endif()

        if (IS_DIRECTORY "${key}")
            message(WARNING "File \"${key}\" is a directory and will be omitted")
            continue()
        endif()

        set(temp_name "${value}")
        set(suffix 0)
        while("${temp_name}" IN_LIST taken_names)
            math(EXPR suffix "${suffix} + 1")
            set(temp_name "${value}")
            string(APPEND temp_name "${suffix}")
        endwhile()

        if ("${value}" IN_LIST taken_names)
            message(WARNING "Name \"${value}\" is already in use. \"${temp_name}\" will be used instead")
        endif()

        set(value "${temp_name}")
        list(APPEND taken_names "${value}")

        string(APPEND resource_embedder_h "extern unsigned char ${value}[];\n")

        file(READ "${key}" resource HEX)
        string(APPEND resource_embedder_cpp "\nunsigned char ${value}[] = \"${resource}\";")
    endif()
endforeach()

string(APPEND resource_embedder_h "}\n\n#endif //RESOURCE_EMBEDDER_H")
string(APPEND resource_embedder_cpp "\n}")

file(WRITE "include/resource_embedder.h" "${resource_embedder_h}")
file(WRITE "src/resource_embedder.cpp" "${resource_embedder_cpp}")

add_library(ResourceEmbedder src/resource_embedder.cpp)
target_include_directories(ResourceEmbedder PUBLIC "${CMAKE_CURRENT_LIST_DIR}/include")
